# 必读！！！
# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# 跑裸核用户请自行去掉下方控制面板模块的注释。
# 机场订阅
proxy-providers:
  SSRDOG:
    url: "yoururl"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🎯 全球直连
  一元机场:
    url: "yoururl"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🎯 全球直连
# 节点信息
proxies:
  - {name: 🎯 全球直连, type: direct}
  - {name: 🛑 拒绝访问, type: reject}

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# 控制面板，external-ui 路径如果出现报错，根据你使用的插件进行调整，比如openclash改为： /etc/openclash/run  ，裸核跑改为/etc/mihomo/run
# 因容易造成新手面板启动问题，我注释掉了，需要的自行开启
#external-controller: 0.0.0.0:9090
#secret: ""
#external-ui: "/etc/nikki/run"
#external-ui-name: zashboard
#external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "+.baidu.com"

# 入站  
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
    - "+.market.xiaomi.com"
  default-nameserver:
    - 223.5.5.5
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 223.5.5.5
    - 119.29.29.29
 
# 出站策略，根据自己情况调整每个策略里分组排序，增删都可以，比如把美国自动放到第一个，比如删除香港故转，注意别漏掉表情逗号等。
# 如果相应分组没有筛选到对应的国家，请根据自己节点名字调整筛选关键字。
# 没有再使用锚点，是考虑很多新手修改难度，这样新手修改某个分组更容易些。
proxy-groups:


  - {name: 🚀 节点选择, type: select, proxies: [♻️ 自动选择, 🎯 全球直连, 🌐 手动切换, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🇨🇳 台湾节点, 🇰🇷 韩国节点, 🇬🇧 英国节点, 🇺🇳 其他国家, 📝 备用机场]}
  - {name: ♻️ 自动选择, type: url-test, tolerance: 20, interval: 300, proxies: [🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🇨🇳 台湾节点, 🇰🇷 韩国节点, 🇬🇧 英国节点, 🇺🇳 其他国家, 📝 备用机场]}
  - {name: 🌐 手动切换, type: select, use: [SSRDOG]}
  - {name: 🪙 币圈网站, type: select, proxies: [🇸🇬 狮城节点, 🎯 全球直连, 🌐 手动切换, 🚀 节点选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇺🇲 美国节点, 🇨🇳 台湾节点, 🇰🇷 韩国节点, 🇬🇧 英国节点, 🇺🇳 其他国家, 📝 备用机场]}
  - {name: 🤖 国外AI, type: select, proxies: [🇭🇰 香港节点, 🎯 全球直连, 🌐 手动切换, 🚀 节点选择, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🇨🇳 台湾节点, 🇰🇷 韩国节点, 🇬🇧 英国节点, 🇺🇳 其他国家, 📝 备用机场]}
  - {name: 🎵 TikTok, type: select, proxies: [🇺🇲 美国节点, 🇭🇰 香港节点, 🎯 全球直连, 🌐 手动切换, 🚀 节点选择, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇨🇳 台湾节点, 🇰🇷 韩国节点, 🇬🇧 英国节点, 🇺🇳 其他国家, 📝 备用机场]}
  - {name: 🎥 NETFLIX, type: select, proxies: [🇭🇰 香港节点, 🎯 全球直连, 🌐 手动切换, 🚀 节点选择, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🇨🇳 台湾节点, 🇰🇷 韩国节点, 🇬🇧 英国节点, 🇺🇳 其他国家, 📝 备用机场]}
  - {name: 📲 Telegram, type: select, proxies: [🇭🇰 香港节点, 🎯 全球直连, 🌐 手动切换, 🚀 节点选择, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🇨🇳 台湾节点, 🇰🇷 韩国节点, 🇬🇧 英国节点, 🇺🇳 其他国家, 📝 备用机场]}
  - {name: 🐦 国外推特, type: select, proxies: [🇭🇰 香港节点, 🎯 全球直连, 🌐 手动切换, 🚀 节点选择, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🇨🇳 台湾节点, 🇰🇷 韩国节点, 🇬🇧 英国节点, 🇺🇳 其他国家, 📝 备用机场]}
  - {name: 👀 YouTube, type: select, proxies: [🇭🇰 香港节点, 🎯 全球直连, 🌐 手动切换, 🚀 节点选择, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🇨🇳 台湾节点, 🇰🇷 韩国节点, 🇬🇧 英国节点, 🇺🇳 其他国家, 📝 备用机场]}


  - {name: 🛑 广告拦截, type: select, proxies: [🛑 拒绝访问, 🎯 全球直连]}
  - {name: 🍃 应用净化, type: select, proxies: [🛑 拒绝访问, 🎯 全球直连]}
  - {name: 🐟 漏网之鱼, type: select, proxies: [🎯 全球直连, 🌐 手动切换, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇸🇬 狮城节点, 🇺🇲 美国节点, 🇨🇳 台湾节点, 🇰🇷 韩国节点, 🇬🇧 英国节点, 🇺🇳 其他国家, 📝 备用机场]}

  - {name: 🇭🇰 香港节点, type: url-test, use: [SSRDOG], tolerance: 20, interval: 300, filter: "(?=.*(广港|香港|HK|Hong Kong|🇭🇰|HongKong)).*$"}
  - {name: 🇯🇵 日本节点, type: url-test, use: [SSRDOG], tolerance: 20, interval: 300, filter: "(?=.*(广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan)).*$"}
  - {name: 🇸🇬 狮城节点, type: url-test, use: [SSRDOG], tolerance: 20, interval: 300, filter: "(?=.*(广新|新加坡|SG|坡|狮城|🇸🇬|Singapore)).*$"}
  - {name: 🇺🇲 美国节点, type: url-test, use: [SSRDOG], tolerance: 20, interval: 300, filter: "(?=.*(广美|美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States)).*$"}
  - {name: 🇨🇳 台湾节点, type: url-test, use: [SSRDOG], tolerance: 20, interval: 300, filter: "(?=.*(广台|台湾|台灣|TW|Tai Wan|🇹🇼|🇨🇳|TaiWan|Taiwan)).*$"}
  - {name: 🇰🇷 韩国节点, type: url-test, use: [SSRDOG], tolerance: 20, interval: 300, filter: "(?=.*(广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea)).*$"}
  - {name: 🇬🇧 英国节点, type: url-test, use: [SSRDOG], tolerance: 20, interval: 300, filter: "(?=.*(英国|英|伦敦|UK|United Kingdom|🇬🇧|London)).*$"}
  - {name: 🇺🇳 其他国家, type: url-test, use: [SSRDOG], tolerance: 20, interval: 300, filter: "^((?!(直连|拒绝|广港|香港|HK|Hong Kong|🇭🇰|HongKong|广台|台湾|台灣|TW|Tai Wan|🇹🇼|🇨🇳|TaiWan|Taiwan|广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan|广新|新加坡|SG|坡|狮城|🇸🇬|Singapore|广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea|广美|美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States|英国|UK|United Kingdom|伦敦|英|London|🇬🇧)).)*$"}
  - {name: 📝 备用机场, type: url-test, use: [一元机场], tolerance: 20, interval: 300}
  # - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连)).)*$"}
  # - {name: 🌐 全部节点, type: select, include-all: true}

# 规则匹配
# 此规则部分没有做防泄露处理，因为弊严重大于利！
rules:

  - RULE-SET,private_domain,🎯 全球直连
  - RULE-SET,proxylite,🚀 节点选择
  - RULE-SET,web3_domain,🪙 币圈网站
  - RULE-SET,binance,🪙 币圈网站
  - RULE-SET,okx,🪙 币圈网站
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,ai_!cn,🤖 国外AI
  - RULE-SET,ai_cn,🎯 全球直连
  - RULE-SET,discord,🚀 节点选择
  - RULE-SET,x,🐦 国外推特
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,meta,🚀 节点选择
  - RULE-SET,youtube_domain,👀 YouTube
  - RULE-SET,github_domain,🚀 节点选择
  - RULE-SET,google_ip,🚀 节点选择,no-resolve
  - RULE-SET,google_domain,🚀 节点选择
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,rockstar,🚀 节点选择
  - RULE-SET,sony,🚀 节点选择
  - RULE-SET,steam,🚀 节点选择
  - RULE-SET,steam_cn,🎯 全球直连
  - RULE-SET,apple_domain,🎯 全球直连
  - RULE-SET,epicgames,🚀 节点选择
  - RULE-SET,porn,🚀 节点选择
  - RULE-SET,xunlei,🎯 全球直连
  - RULE-SET,baidu,🎯 全球直连
  - RULE-SET,aliyun,🎯 全球直连
  - RULE-SET,alibaba,🎯 全球直连
  - RULE-SET,bytedance,🎯 全球直连
  - RULE-SET,tencent,🎯 全球直连
  - RULE-SET,bilibili,🎯 全球直连
  - RULE-SET,directlite,🎯 全球直连
  - RULE-SET,paypal_domain,🚀 节点选择
  - RULE-SET,onedrive_domain,🎯 全球直连
  - RULE-SET,microsoft_domain,🎯 全球直连
  - RULE-SET,speedtest_domain,🎯 全球直连
  - RULE-SET,china_domain,🎯 全球直连
  - RULE-SET,china_company_ip,🎯 全球直连
  - RULE-SET,china_download,🎯 全球直连
  - RULE-SET,gfw_domain,🚀 节点选择
  - RULE-SET,geolocation-!cn,🚀 节点选择
  - RULE-SET,cn_domain,🎯 全球直连
  - RULE-SET,cn_ip,🎯 全球直连
  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  # 本机地址等
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  # 国外dns等
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/Mavolas/openclash_rule/refs/heads/main/ProxyLite.list"}

  web3_domain: { <<: *class, url: "https://raw.githubusercontent.com/Mavolas/openclash_rule/refs/heads/main/Crypto.list"}
  binance: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/binance.mrs"}
  okx: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/okx.mrs"}

  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}

  ai_!cn: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  ai_cn: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-cn.mrs" }

  discord: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/discord.mrs" }
  x: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/x.mrs" }
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  meta: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/meta.mrs"}
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}

  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}

  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}

  rockstar: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/rockstar.mrs" }
  sony: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/sony.mrs" }
  steam: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/steam.mrs"}
  steam_cn: { <<: *class, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/meta/geo/geosite/steam%40cn.list"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}

  epicgames: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/epicgames.mrs"}

  porn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/mindgeek-porn.mrs"}

  xunlei: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/xunlei.mrs"}
  baidu: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/baidu.mrs"}
  aliyun: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/aliyun.mrs"}
  alibaba: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/alibaba.mrs"}
  bytedance: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/bytedance.mrs"}
  tencent: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tencent.mrs"}
  bilibili: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/bilibili.mrs"}

  #国内常用网站补足
  directlite: { <<: *class, url: "https://raw.githubusercontent.com/Mavolas/openclash_rule/refs/heads/main/Direct.list"}

  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}

  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  
  china_domain: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaDomain.list"}
  china_company_ip: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaCompanyIp.list"}
  china_download: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Download.list"}

  # 代理兜底
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}

  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}


